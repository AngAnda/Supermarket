//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Supermarket.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SupermarketEntities : DbContext
    {
        public SupermarketEntities()
            : base("name=SupermarketEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BillProduct> BillProducts { get; set; }
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Producer> Producers { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Nullable<decimal>> spCreateBill(Nullable<int> userID, Nullable<System.DateTime> billDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spCreateBill", userIDParameter, billDateParameter);
        }
    
        public virtual int spCreateCategory(string categoryName)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateCategory", categoryNameParameter);
        }
    
        public virtual int spCreateProducer(string producerName, string producerCountry)
        {
            var producerNameParameter = producerName != null ?
                new ObjectParameter("ProducerName", producerName) :
                new ObjectParameter("ProducerName", typeof(string));
    
            var producerCountryParameter = producerCountry != null ?
                new ObjectParameter("ProducerCountry", producerCountry) :
                new ObjectParameter("ProducerCountry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateProducer", producerNameParameter, producerCountryParameter);
        }
    
        public virtual int spCreateProduct(string productName, string barcode, Nullable<int> categoryId, Nullable<int> producerId)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var producerIdParameter = producerId.HasValue ?
                new ObjectParameter("ProducerId", producerId) :
                new ObjectParameter("ProducerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateProduct", productNameParameter, barcodeParameter, categoryIdParameter, producerIdParameter);
        }
    
        public virtual int spCreateProductToBill(Nullable<int> billID, Nullable<int> productID, Nullable<decimal> quantity, Nullable<decimal> sum)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("Sum", sum) :
                new ObjectParameter("Sum", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateProductToBill", billIDParameter, productIDParameter, quantityParameter, sumParameter);
        }
    
        public virtual int spCreateStock(Nullable<decimal> stockQuantity, string stockUnitOfMeasure, Nullable<System.DateTime> stockSupplyDate, Nullable<System.DateTime> stockExpirationDate, Nullable<decimal> stockPurchasePrice, Nullable<decimal> vTA)
        {
            var stockQuantityParameter = stockQuantity.HasValue ?
                new ObjectParameter("StockQuantity", stockQuantity) :
                new ObjectParameter("StockQuantity", typeof(decimal));
    
            var stockUnitOfMeasureParameter = stockUnitOfMeasure != null ?
                new ObjectParameter("StockUnitOfMeasure", stockUnitOfMeasure) :
                new ObjectParameter("StockUnitOfMeasure", typeof(string));
    
            var stockSupplyDateParameter = stockSupplyDate.HasValue ?
                new ObjectParameter("StockSupplyDate", stockSupplyDate) :
                new ObjectParameter("StockSupplyDate", typeof(System.DateTime));
    
            var stockExpirationDateParameter = stockExpirationDate.HasValue ?
                new ObjectParameter("StockExpirationDate", stockExpirationDate) :
                new ObjectParameter("StockExpirationDate", typeof(System.DateTime));
    
            var stockPurchasePriceParameter = stockPurchasePrice.HasValue ?
                new ObjectParameter("StockPurchasePrice", stockPurchasePrice) :
                new ObjectParameter("StockPurchasePrice", typeof(decimal));
    
            var vTAParameter = vTA.HasValue ?
                new ObjectParameter("VTA", vTA) :
                new ObjectParameter("VTA", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateStock", stockQuantityParameter, stockUnitOfMeasureParameter, stockSupplyDateParameter, stockExpirationDateParameter, stockPurchasePriceParameter, vTAParameter);
        }
    
        public virtual int spCreateUser(string username, string password, Nullable<bool> isAdmin)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateUser", usernameParameter, passwordParameter, isAdminParameter);
        }
    
        public virtual int spDeactivateStock(Nullable<int> stockID)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeactivateStock", stockIDParameter);
        }
    
        public virtual int spDeleteCategory(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteCategory", categoryIdParameter);
        }
    
        public virtual int spDeleteProducer(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProducer", idParameter);
        }
    
        public virtual int spDeleteProduct(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProduct", productIdParameter);
        }
    
        public virtual int spDeleteUserById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteUserById", idParameter);
        }
    
        public virtual int spFinalizeBill(Nullable<int> billID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFinalizeBill", billIDParameter);
        }
    
        public virtual ObjectResult<spGetCategories_Result> spGetCategories(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCategories_Result>("spGetCategories", categoryIdParameter);
        }
    
        public virtual ObjectResult<spGetProducer_Result> spGetProducer(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProducer_Result>("spGetProducer", idParameter);
        }
    
        public virtual ObjectResult<spGetProducers_Result> spGetProducers(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProducers_Result>("spGetProducers", idParameter);
        }
    
        public virtual ObjectResult<spGetProductByBarcode_Result> spGetProductByBarcode(Nullable<int> barcode)
        {
            var barcodeParameter = barcode.HasValue ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProductByBarcode_Result>("spGetProductByBarcode", barcodeParameter);
        }
    
        public virtual ObjectResult<spGetProductById_Result> spGetProductById(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProductById_Result>("spGetProductById", productIdParameter);
        }
    
        public virtual ObjectResult<spGetProductS_Result> spGetProductS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProductS_Result>("spGetProductS");
        }
    
        public virtual ObjectResult<spGetProductsByProducer_Result> spGetProductsByProducer(Nullable<int> producerId)
        {
            var producerIdParameter = producerId.HasValue ?
                new ObjectParameter("ProducerId", producerId) :
                new ObjectParameter("ProducerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProductsByProducer_Result>("spGetProductsByProducer", producerIdParameter);
        }
    
        public virtual ObjectResult<spGetUserByCredentials_Result> spGetUserByCredentials(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserByCredentials_Result>("spGetUserByCredentials", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spGetUserById_Result> spGetUserById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserById_Result>("spGetUserById", idParameter);
        }
    
        public virtual int spUpdateStockSellingPrice(Nullable<int> stockID, Nullable<decimal> newSellingPrice)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            var newSellingPriceParameter = newSellingPrice.HasValue ?
                new ObjectParameter("NewSellingPrice", newSellingPrice) :
                new ObjectParameter("NewSellingPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateStockSellingPrice", stockIDParameter, newSellingPriceParameter);
        }
    }
}
